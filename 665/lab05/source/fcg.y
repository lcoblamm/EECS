%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern int yylineno;
int yydebug = 1;
char* lastFunction = "";
extern void yyerror( char* );
extern int yylex();
%}

/*********************************************************
 ********************************************************/
%union {
    char* id;
}

%token <id> ID
%token INTVAL
%token PREPROC
%token FLTVAL
%token DBLVAL
%token STRVAL
%token CHARVAL
%token VOID
%token CHAR
%token SHORT
%token INT
%token LONG
%token FLOAT
%token DOUBLE
%token EQ
%token NE
%token GE
%token LE
%token GT
%token LT
%token ADD
%token SUB
%token MUL
%token DIV
%token MOD
%token OR
%token AND
%token BITOR
%token BITAND
%token BITXOR
%token NOT
%token COM
%token LSH
%token RSH
%token SET
%token SETADD
%token SETSUB
%token SETMUL
%token SETDIV
%token SETMOD
%token SETOR
%token SETAND
%token SETXOR
%token SETLSH
%token SETRSH
%token RETURN
%token DO
%token WHILE
%token FOR
%token SWITCH
%token CASE
%token DEFAULT
%token IF
%token ELSE
%token CONTINUE
%token BREAK
%token GOTO
%token UNSIGNED
%token TYPEDEF
%token STRUCT
%token UNION
%token CONST
%token STATIC
%token EXTERN
%token AUTO
%token REGISTER
%token SIZEOF


%start top

%%

/*********************************************************
 * The top level parsing rule, as set using the %start
 * directive above. You should modify this rule to
 * parse the contents of a file.
 ********************************************************/
top : 
    | function top


/* This rule matches a  function in C Program */
function : func_signature '{' func_body '}'

/* This rule matches a function signature such as int main( int argc, char *argv[])*/
func_signature : anyType ID '(' args ')' { printf("%s", $2); printf(";\n"); lastFunction = $2; }
    | anyType ID '(' ')' { printf("%s", $2); printf(";\n"); lastFunction = $2; }

/* matches function arguments */
args : typedID
    | typedID ',' args

typedID : type pointer ID array

pointer : 
    | MUL pointer

array : 
    | '[' arraySize ']' array

arraySize :
    | INTVAL

func_body : 
    | declaration func_body
    | statement func_body

declaration : typedID ';' 

statement : ifmatched
    | ifunmatched

nonifstatement : ID SET expr ';'
    | RETURN expr ';'
    | ID '(' funcArgs ')' ';' { printf("%s -> %s;\n", lastFunction, $1); }
    | ID '(' ')' ';' { printf("%s -> %s;\n", lastFunction, $1); }
    | '{' statementSet '}'
    | WHILE '(' expr ')' statement

ifmatched : IF '(' expr ')' ifmatched ELSE ifmatched
    | nonifstatement

ifunmatched : IF '(' expr ')' statement
    | IF '(' expr ')' ifmatched ELSE ifunmatched

statementSet :
    | statement statementSet

funcArgs : expr
    | expr ',' funcArgs

expr : term8

exprNoBinop : INTVAL
    | STRVAL
    | CHARVAL
    | DBLVAL
    | FLTVAL
    | ID '(' ')' { printf("%s -> %s;\n", lastFunction, $1); }
    | ID '(' funcArgs ')' { printf("%s -> %s;\n", lastFunction, $1); }
    | ID

term8 : term8 binop8 term7
    | term7

term7 : term7 binop7 term6 
    | term6

term6 : term6 binop6 term5
    | term5

term5 : term5 binop5 term4
    | term4

term4 : term4 binop4 term3 
    | term3

term3 : term3 binop3 term2
    | term2

term2 : term2 binop2 term1
    | term1

term1 : term1 binop1 exprNoBinop
    | exprNoBinop

binop1 : MUL 
    | DIV 
    | MOD 

binop2 : ADD 
    | SUB 

binop3 : LSH 
    | RSH 

binop4 : GE 
    | LE 
    | GT 
    | LT 

binop5: EQ
    | NE

binop6: BITAND 

binop7: BITXOR

binop8: BITOR

anyType: VOID
    | type

type : CHAR
    | SHORT
    | INT
    | LONG
    | FLOAT
    | DOUBLE

%%

/*********************************************************
 * This method is invoked by the parser whenever an
 * error is encountered during parsing; just print
 * the error to stderr.
 ********************************************************/
void yyerror( char *err ) {
    fprintf( stderr, "at line %d: %s\n", yylineno, err );
}

/*********************************************************
 * This is the main function for the function call
 * graph program. We invoke the parser and return the
 * error/success code generated by it.
 ********************************************************/
int main( int argc, const char *argv[] ) {
    printf( "digraph funcgraph {\n" );
    int res = yyparse();
    printf( "}\n" );

    return res;
}
